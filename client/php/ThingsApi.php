<?php
/**
 *  Copyright 2011 Wordnik, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/**
 *
 * NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
 */
class ThingsApi {

	function __construct($apiClient) {
	  $this->apiClient = $apiClient;
	}

  /**
	 * getSubscriptions
	 * Get all subscriptions
   * soId, string: id of the ServiceObject (required)
   * streamId, string: id of the stream to be subscribed to (required)
   * @return 
	 */

   public function getSubscriptions($soId, $streamId) {

  		//parse inputs
  		$resourcePath = "/things/{soId}/streams/{streamId}/subscriptions";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "GET";
      $queryParams = array();
      $headerParams = array();
      $headerParams['Accept'] = '(mediaType,application/json)';
      $headerParams['Content-Type'] = '';

      if($soId != null) {
  			$resourcePath = str_replace("{" . "soId" . "}",
  			                            $this->apiClient->toPathValue($soId), $resourcePath);
  		}
  		if($streamId != null) {
  			$resourcePath = str_replace("{" . "streamId" . "}",
  			                            $this->apiClient->toPathValue($streamId), $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      }
  /**
	 * createSubscription
	 * Create a new subscription
   * soId, string: id of the ServiceObject (required)
   * streamId, string: id of the stream to be subscribed to (required)
   * body, string: Subscriptions object that needs to be created. (required)
   * @return 
	 */

   public function createSubscription($soId, $streamId, $body) {

  		//parse inputs
  		$resourcePath = "/things/{soId}/streams/{streamId}/subscriptions";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "POST";
      $queryParams = array();
      $headerParams = array();
      $headerParams['Accept'] = '(mediaType,application/json)';
      $headerParams['Content-Type'] = '';

      if($soId != null) {
  			$resourcePath = str_replace("{" . "soId" . "}",
  			                            $this->apiClient->toPathValue($soId), $resourcePath);
  		}
  		if($streamId != null) {
  			$resourcePath = str_replace("{" . "streamId" . "}",
  			                            $this->apiClient->toPathValue($streamId), $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      }
  /**
	 * getSO
	 * Retrieve the ServiceObject description
   * soId, string: id of the ServiceObject (required)
   * @return 
	 */

   public function getSO($soId) {

  		//parse inputs
  		$resourcePath = "/things/{soId}";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "GET";
      $queryParams = array();
      $headerParams = array();
      $headerParams['Accept'] = '(mediaType,application/json)';
      $headerParams['Content-Type'] = '';

      if($soId != null) {
  			$resourcePath = str_replace("{" . "soId" . "}",
  			                            $this->apiClient->toPathValue($soId), $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      }
  /**
	 * createSO
	 * Deploy a new ServiceObject
   * body, string: ServiceObject that needs to be created. (required)
   * @return 
	 */

   public function createSO($body) {

  		//parse inputs
  		$resourcePath = "/things";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "POST";
      $queryParams = array();
      $headerParams = array();
      $headerParams['Accept'] = '(mediaType,application/json)';
      $headerParams['Content-Type'] = '';

      //make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      }
  /**
	 * getAllSOs
	 * Get all the ServiceObjects from a user
   * @return 
	 */

   public function getAllSOs() {

  		//parse inputs
  		$resourcePath = "/things";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "GET";
      $queryParams = array();
      $headerParams = array();
      $headerParams['Accept'] = '(mediaType,application/json)';
      $headerParams['Content-Type'] = '';

      //make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      }
  /**
	 * getLastUpdate
	 * Get Data stored for the ServiceObject
   * soId, string: id of the ServiceObject (required)
   * streamId, string: id of the stream to be subscribed to (required)
   * @return 
	 */

   public function getLastUpdate($soId, $streamId) {

  		//parse inputs
  		$resourcePath = "/things/{soId}/streams/{streamId}/lastUpdate";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "GET";
      $queryParams = array();
      $headerParams = array();
      $headerParams['Accept'] = '(mediaType,application/json)';
      $headerParams['Content-Type'] = '';

      if($soId != null) {
  			$resourcePath = str_replace("{" . "soId" . "}",
  			                            $this->apiClient->toPathValue($soId), $resourcePath);
  		}
  		if($streamId != null) {
  			$resourcePath = str_replace("{" . "streamId" . "}",
  			                            $this->apiClient->toPathValue($streamId), $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      }
  /**
	 * updateSOData
	 * Push data to the platform
   * soId, string: id of the ServiceObject (required)
   * streamId, string: id of the stream to be subscribed to (required)
   * body, string: Data object that needs to be added. (required)
   * @return 
	 */

   public function updateSOData($soId, $streamId, $body) {

  		//parse inputs
  		$resourcePath = "/things/{soId}/streams/{streamId}";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "PUT";
      $queryParams = array();
      $headerParams = array();
      $headerParams['Accept'] = '(mediaType,application/json)';
      $headerParams['Content-Type'] = '';

      if($soId != null) {
  			$resourcePath = str_replace("{" . "soId" . "}",
  			                            $this->apiClient->toPathValue($soId), $resourcePath);
  		}
  		if($streamId != null) {
  			$resourcePath = str_replace("{" . "streamId" . "}",
  			                            $this->apiClient->toPathValue($streamId), $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      }
  /**
	 * getSOData
	 * Get Data stored for the ServiceObject
   * soId, string: id of the ServiceObject (required)
   * streamId, string: id of the stream to be subscribed to (required)
   * @return 
	 */

   public function getSOData($soId, $streamId) {

  		//parse inputs
  		$resourcePath = "/things/{soId}/streams/{streamId}";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "GET";
      $queryParams = array();
      $headerParams = array();
      $headerParams['Accept'] = '(mediaType,application/json)';
      $headerParams['Content-Type'] = '';

      if($soId != null) {
  			$resourcePath = str_replace("{" . "soId" . "}",
  			                            $this->apiClient->toPathValue($soId), $resourcePath);
  		}
  		if($streamId != null) {
  			$resourcePath = str_replace("{" . "streamId" . "}",
  			                            $this->apiClient->toPathValue($streamId), $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      }
  /**
	 * getStreams
	 * Retieve the description of the ServiceObject streams
   * soId, string: id of the ServiceObject (required)
   * @return 
	 */

   public function getStreams($soId) {

  		//parse inputs
  		$resourcePath = "/things/{soId}/streams";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "GET";
      $queryParams = array();
      $headerParams = array();
      $headerParams['Accept'] = '(mediaType,application/json)';
      $headerParams['Content-Type'] = '';

      if($soId != null) {
  			$resourcePath = str_replace("{" . "soId" . "}",
  			                            $this->apiClient->toPathValue($soId), $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      }
  
}

